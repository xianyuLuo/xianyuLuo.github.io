<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on xianyuLuo Blog</title>
    <link>http://xianyuluo.com/categories/kubernetes/</link>
    <description>Recent content in Kubernetes on xianyuLuo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-ZH</language>
    <lastBuildDate>Tue, 26 Mar 2019 09:42:15 +0800</lastBuildDate>
    
	<atom:link href="http://xianyuluo.com/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Prometheus监控k8s(三)——业务指标采集</title>
      <link>http://xianyuluo.com/post/prometheus%E7%9B%91%E6%8E%A7k8s%E4%B8%89%E4%B8%9A%E5%8A%A1%E6%8C%87%E6%A0%87%E9%87%87%E9%9B%86/</link>
      <pubDate>Tue, 26 Mar 2019 09:42:15 +0800</pubDate>
      
      <guid>http://xianyuluo.com/post/prometheus%E7%9B%91%E6%8E%A7k8s%E4%B8%89%E4%B8%9A%E5%8A%A1%E6%8C%87%E6%A0%87%E9%87%87%E9%9B%86/</guid>
      <description>背景 由于容器化和微服务的大力发展，Kubernetes基本已经统一了容器管理方案，当我们使用Kubernetes来进行容器化管理的时候，全面监控Kubbernetes也就成了我们第一个需要探索的问题。我们需要监控kubernetes的ingress、service、deployment、pod&amp;hellip;&amp;hellip;等等服务，以达到随时掌握Kubernetes集群的内部状况。
此文章也是Prometheus监控系列的第三篇，具体描述了在Kubernetes中使用Prometheus来采集业务指标。多数为思想指导，会列出两个列子。第一个例子是针对部署在Kubernetes中的服务，另外一个例子是非Kubernetes部署的服务。前者为使用“动态采集”，后者使用“静态采集”。
概念 要使用Prometheus实现自动采集业务指标数据真的非常简单，只需要2步
1、业务侧实现一个接口，返Prometheus规范化数据，如下：
traefik_entrypoint_requests_total{code=&amp;quot;302&amp;quot;,entrypoint=&amp;quot;https&amp;quot;,method=&amp;quot;HEAD&amp;quot;,protocol=&amp;quot;http&amp;quot;} 1 traefik_entrypoint_requests_total{code=&amp;quot;302&amp;quot;,entrypoint=&amp;quot;https&amp;quot;,method=&amp;quot;POST&amp;quot;,protocol=&amp;quot;http&amp;quot;} 1 traefik_entrypoint_requests_total{code=&amp;quot;304&amp;quot;,entrypoint=&amp;quot;http&amp;quot;,method=&amp;quot;GET&amp;quot;,protocol=&amp;quot;http&amp;quot;} 15 traefik_entrypoint_requests_total{code=&amp;quot;304&amp;quot;,entrypoint=&amp;quot;https&amp;quot;,method=&amp;quot;GET&amp;quot;,protocol=&amp;quot;http&amp;quot;} 5951 traefik_entrypoint_requests_total{code=&amp;quot;400&amp;quot;,entrypoint=&amp;quot;https&amp;quot;,method=&amp;quot;GET&amp;quot;,protocol=&amp;quot;http&amp;quot;} 149 traefik_entrypoint_requests_total{code=&amp;quot;403&amp;quot;,entrypoint=&amp;quot;http&amp;quot;,method=&amp;quot;GET&amp;quot;,protocol=&amp;quot;http&amp;quot;} 2 traefik_entrypoint_requests_total{code=&amp;quot;403&amp;quot;,entrypoint=&amp;quot;https&amp;quot;,method=&amp;quot;HEAD&amp;quot;,protocol=&amp;quot;http&amp;quot;} 2 traefik_entrypoint_requests_total{code=&amp;quot;404&amp;quot;,entrypoint=&amp;quot;http&amp;quot;,method=&amp;quot;GET&amp;quot;,protocol=&amp;quot;http&amp;quot;} 680 traefik_entrypoint_requests_total{code=&amp;quot;404&amp;quot;,entrypoint=&amp;quot;http&amp;quot;,method=&amp;quot;HEAD&amp;quot;,protocol=&amp;quot;http&amp;quot;} 15 traefik_entrypoint_requests_total{code=&amp;quot;404&amp;quot;,entrypoint=&amp;quot;http&amp;quot;,method=&amp;quot;POST&amp;quot;,protocol=&amp;quot;http&amp;quot;} 674   每行代表一个监控项，以KEY VALUE形式返回，KEY可以带上0个或多个属性，多个属性以 “，”分隔。在Prometheus中查询数据的时候，可以用这些属性作为筛选条件。  2、运维侧部署的时候，在svc上带上3个标签</description>
    </item>
    
    <item>
      <title>Prometheus监控k8s(二)——监控部署</title>
      <link>http://xianyuluo.com/post/prometheus%E7%9B%91%E6%8E%A7k8s%E4%BA%8C%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 18 Mar 2019 15:51:18 +0800</pubDate>
      
      <guid>http://xianyuluo.com/post/prometheus%E7%9B%91%E6%8E%A7k8s%E4%BA%8C%E7%9B%91%E6%8E%A7%E9%83%A8%E7%BD%B2/</guid>
      <description>背景 由于容器化和微服务的大力发展，Kubernetes基本已经统一了容器管理方案，当我们使用Kubernetes来进行容器化管理的时候，全面监控Kubernetes也就成了我们第一个需要探索的问题。我们需要监控kubernetes的ingress、service、deployment、pod&amp;hellip;&amp;hellip;等等服务，已达到随时掌握Kubernetes集群的内部状况。
此文章是Prometheus监控系列的第二篇，基于上一篇讲解了怎么对Kubernetes集群实施Prometheus监控。
Prometheus部署 在k8s上部署Prometheus十分简单，下面给的例子中将Prometheus部署到prometheus命名空间。
部署——监控数据采集 Prometheus 将kube-state-metrics和prometheus分开部署，先部署prometheus。
prometheus-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRole metadata: name: prometheus rules: - apiGroups: [&amp;quot;&amp;quot;] resources: - nodes - nodes/proxy - services - endpoints - pods verbs: [&amp;quot;get&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;watch&amp;quot;] - apiGroups: - extensions resources: - ingresses verbs: [&amp;quot;get&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;watch&amp;quot;] - nonResourceURLs: [&amp;quot;/metrics&amp;quot;] verbs: [&amp;quot;get&amp;quot;] --- apiVersion: v1 kind: ServiceAccount metadata: name: prometheus namespace: prometheus --- apiVersion: rbac.</description>
    </item>
    
    <item>
      <title>Prometheus监控k8s(一)——监控框架调研</title>
      <link>http://xianyuluo.com/post/prometheus%E7%9B%91%E6%8E%A7k8s%E4%B8%80%E7%9B%91%E6%8E%A7%E6%A1%86%E6%9E%B6%E8%B0%83%E7%A0%94/</link>
      <pubDate>Tue, 12 Mar 2019 22:11:13 +0800</pubDate>
      
      <guid>http://xianyuluo.com/post/prometheus%E7%9B%91%E6%8E%A7k8s%E4%B8%80%E7%9B%91%E6%8E%A7%E6%A1%86%E6%9E%B6%E8%B0%83%E7%A0%94/</guid>
      <description>背景 由于容器化和微服务的大力发展，Kubernetes基本已经统一了容器管理方案，当我们使用Kubernetes来进行容器化管理的时候，全面监控Kubernetes也就成了我们第一个需要探索的问题。我们需要监控kubernetes的ingress、service、deployment、pod&amp;hellip;&amp;hellip;等等服务，已达到随时掌握Kubernetes集群的内部状况。
此文章是Prometheus监控系列的第一篇，目的也很明确，旨在于寻找一套能够胜任kubernetes集群监控的架构。
k8s监控方案调研 1、cAdvisor + InfluxDB + Grafana 2、Heapster + InfluxDB + Grafana [x] 3、Promethus + kube-state-metrics + Grafana</description>
    </item>
    
    <item>
      <title>Ingress介绍</title>
      <link>http://xianyuluo.com/post/ingress%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 09 Nov 2018 18:29:30 +0800</pubDate>
      
      <guid>http://xianyuluo.com/post/ingress%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;

&lt;p&gt;Ingress是kubernetes1.1之后官方提出的一个标准，按照这套标准它有多种实现，比如 nginx-ingress-controller、traefik-ingress-controller、kong-ingress-controller，这3中都是官方推荐的。Ingress的出现解决了Service的短板：只能在tcp层面做负载均衡。而ingress可以方便的做http/https层面的负载均衡。一个是在4层，一个在7层。ingress就是控制客户端从入口连接到k8s集群服务的规则的集合！&lt;/p&gt;

&lt;h3 id=&#34;ingress出现之前-服务暴露是这样的&#34;&gt;ingress出现之前，服务暴露是这样的：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://dl-blog.laoxianyu.cn/image2018-8-10_14-6-49.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ingress出现之后-服务暴露是这样的&#34;&gt;ingress出现之后，服务暴露是这样的：&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>使用lets encript申请通配符证书</title>
      <link>http://xianyuluo.com/post/%E4%BD%BF%E7%94%A8let-s-encript%E7%94%B3%E8%AF%B7%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Wed, 07 Nov 2018 22:42:59 +0800</pubDate>
      
      <guid>http://xianyuluo.com/post/%E4%BD%BF%E7%94%A8let-s-encript%E7%94%B3%E8%AF%B7%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6/</guid>
      <description>什么是 Let’s Encrypt Let’s Encrypt 是国外一个公共的免费 SSL 项目，由 Linux 基金会托管。它的来头不小，由 Mozilla、思科、Akamai、IdenTrust 和 EFF 等组织发起，目的就是向网站自动签发和管理免费证书。以便加速互联网由 HTTP 过渡到 HTTPS，目前 Facebook 等大公司开始加入赞助行列。</description>
    </item>
    
    <item>
      <title>traefik在kubernetes中的应用</title>
      <link>http://xianyuluo.com/post/traefik%E5%9C%A8kubernetes%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 10 Sep 2018 22:08:46 +0800</pubDate>
      
      <guid>http://xianyuluo.com/post/traefik%E5%9C%A8kubernetes%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>目的： 通过本篇文章，能够简单了解和掌握Traefik在Kubernetes中的应用
如果不了解ingress和ingress-controller概念，请先看前一篇文章。http://km.oa.dragonest.com/x/RoFf
traefik介绍： 开源的微服务网关服务，支持Mesos、Docker、Rancher、Kubernetes等等，也支持直接部署在物理服务器。能够实现负载均衡、HTTPS、自动更新Ingerss配置等等
traefik部署： traefik-deployment部署 apiVersion: extensions/v1beta1 kind: Deployment metadata: name: traefik-ingress-controller namespace: traefik labels: k8s-app: traefik-ingress-lb spec: replicas: 1 selector: matchLabels: k8s-app: traefik-ingress-lb template: metadata: labels: k8s-app: traefik-ingress-lb name: traefik-ingress-lb spec: nodeSelector: traefik-controller-qa: &amp;quot;yes&amp;quot; serviceAccountName: traefik-ingress-controller terminationGracePeriodSeconds: 60 volumes: - name: ssl secret: secretName: traefik-cert - name: config configMap: name: traefik-conf containers: - image: traefik name: traefik-ingress-lb volumeMounts: - mountPath: &amp;quot;/ssl&amp;quot; name: &amp;quot;ssl&amp;quot; - mountPath: &amp;quot;/config&amp;quot; name: &amp;quot;config&amp;quot; ports: - name: http containerPort: 80 - name: admin containerPort: 8080 - name: https containerPort: 443 args: - --configFile=/config/traefik.</description>
    </item>
    
  </channel>
</rss>